[gd_scene load_steps=7 format=3 uid="uid://eb45g6exg3qh"]

[ext_resource type="Texture2D" uid="uid://djy8ppnshq75b" path="res://icon.svg" id="1_rc4rb"]

[sub_resource type="GDScript" id="GDScript_vsbh0"]
script/source = "extends CharacterBody2D
var basespeed = 600.0
var slidespeed = 900
var SPEED = basespeed
const JUMP_VELOCITY = -600.0
var walljumpvelocity = 1300
enum States {Ground, Jumping, Falling, On_Wall, Walljumping, Walking, Crouching, Sneaking, Sliding}
var nojumps = false
var state : int = States.Ground
var gravity = ProjectSettings.get_setting(\"physics/2d/default_gravity\")
var coyote = false
var coyote_frames = 3
var justjumped = false
var coyotestarted = false
var jumpbuffer = false
var canwallcolcheck = false
var wallslow = true
var timerstarted = false
var cantuncrouch = false
var sliding = false
var attacking = false 
@onready var Standingcshape = $PlayerCol
@onready var Crouchingcshape = $CrouchCol
signal paused

func _ready():
	Gamemanager.player = self

func jump():
	velocity.y = JUMP_VELOCITY
	justjumped = true
	if state != States.Walljumping:
		state = States.Jumping
func die():
	Gamemanager.respawn_player()
func _on_coyote_timer_timeout():
	coyote = false
func _on_jump_buffer_timeout():
	jumpbuffer = false
func _on_wall_slow_timer_timeout():
	wallslow = false
func _on_slide_timer_timeout():
		sliding = false
		print(\"slideend\")
func _on_wall_col_check_timer_timeout():
	canwallcolcheck = true
	print(\"can wall check\")
func beginslide():
	state = States.Sliding
	if sliding == false:
		$SlideTimer.start()
		sliding = true
		print(\"slidestart\")
func handle_wall_jump():
	if state != States.On_Wall: return
	var wall_normal = get_wall_normal()
	#handle wall jump
	if Input.is_action_just_pressed(\"up\") and wall_normal == Vector2.LEFT and state != States.Walljumping:
		state = States.Walljumping
		velocity.x -= walljumpvelocity
		jump()
	if Input.is_action_just_pressed(\"up\") and wall_normal == Vector2.RIGHT and state != States.Walljumping:
		state = States.Walljumping
		velocity.x += walljumpvelocity
		jump()
func handle_attack():
	if Input.is_action_just_pressed(\"attack\"):
		print(\"boosh\")
		pass
func _on_killzone_body_entered(_body):
	print(\"dead\")
	die()
func _physics_process(delta):
	var direction = Input.get_axis(\"left\", \"right\")
	if state != States.Walljumping and state != States.Sliding:
		if direction:
			velocity.x = direction * SPEED
		else:
			velocity.x = move_toward(velocity.x, 0, SPEED)
	if direction != 0:
		if direction >0:
			scale.x = 1.5
		if direction <0: 
			scale.x = -1.5
	handle_wall_jump()
	handle_attack()
	if state == States.Walljumping:
		canwallcolcheck = false
		$WallColCheckTimer.start()
		print(\"Cant wallcheck\")
		if is_on_wall() and canwallcolcheck == true:
			state = States.On_Wall
			print(\"hoho!\")

	Crouchingcshape.disabled = true
	Standingcshape.disabled = false
	if not is_on_floor():
		velocity.y += gravity * delta
		if Input.is_action_just_pressed(\"up\"):
			$JumpBuffer.start()
			jumpbuffer = true

	if $AboveCollision.is_colliding() or $AboveCollision2.is_colliding() or $AboveCollision3.is_colliding():
		cantuncrouch = true
	else:
		cantuncrouch = false

	if Input.is_action_just_pressed(\"pause\"):
		get_tree().paused = true
		emit_signal(\"paused\")

#Manages groundedstate
	if is_on_floor() and !cantuncrouch and state != States.Sliding and velocity.x == 0:
		state = States.Ground
		nojumps = false
		justjumped = false
		coyotestarted = false
	if velocity.y > 0 and !cantuncrouch:
		state = States.Falling

#Manages jump buffer jumping when hit floor
	if is_on_floor():
		if jumpbuffer == true:
			jump()
			jumpbuffer = false

	if velocity.x < 0 and is_on_floor() or velocity.x > 0 and is_on_floor():
		if not Input.is_action_pressed(\"down\") and sliding == false and !cantuncrouch:
			state = States.Walking

	#if Input.is_action_pressed(\"scan\") and state == States.Ground:
		#pass
		#enter scanning state
		#instantialize scan radar 
#Wallhang code
	if !is_on_floor() and is_on_wall():
		var wall_normal = get_wall_normal()
		if wall_normal == Vector2.RIGHT and !Input.is_action_just_pressed(\"up\") and Input.is_action_pressed(\"left\"):
			state = States.On_Wall
			velocity.y *= .85
		if  wall_normal == Vector2.LEFT and !Input.is_action_just_pressed(\"up\") and Input.is_action_pressed(\"right\"):
			state = States.On_Wall
			velocity.y *= .85

	if !is_on_floor() and justjumped == false and coyotestarted == false: #and coyote == false:
		$CoyoteTimer.start()
		coyote = true
		coyotestarted = true
		print(\"coyotestart\")
#Crouch code
	if state == States.Ground:
		sliding = false
		if Input.is_action_pressed(\"down\"):
			if velocity.x == 0:
				state = States.Crouching
#Slide code
	if state == States.Walking:
		if Input.is_action_just_pressed(\"down\"):
			state = States.Sliding
			if sliding == false:
				$SlideTimer.start()
				sliding = true
				print(\"slidestart\")
#More slide code
	if Input.is_action_pressed(\"down\"):
		#if wall is above character
		#disable crouch
		if state == States.Walking:
			beginslide()
		if Input.is_action_just_pressed(\"right\"):
			beginslide()
		if Input.is_action_just_pressed(\"left\"):
			beginslide()
	#else: 
		#Standingcshape.disabled = false
		#Crouchingcshape.disabled = true
#Sliding code...
	if state == States.Sliding:
		Standingcshape.disabled = true
		Crouchingcshape.disabled = false
		SPEED = slidespeed 
		if sliding == false:
			if cantuncrouch == false:
				velocity.x = 0
		if velocity.x == 0:
			state = States.Ground
	else:
		SPEED = basespeed

	if state == States.Crouching:
		Standingcshape.disabled = true
		Crouchingcshape.disabled = false


	if state == States.Falling:
		velocity.y += 20

	if state == States.On_Wall:
		if velocity.y > 0:
			if Input.is_action_just_pressed(\"down\"):
				wallslow = false
			if wallslow == true:
				gravity = 300
				if timerstarted == false:
					$WallSlowTimer.start()
					timerstarted = true
			else:
				gravity = ProjectSettings.get_setting(\"physics/2d/default_gravity\")
				velocity.y *= 1.15
	else:
		wallslow = true
		timerstarted = false
		gravity = ProjectSettings.get_setting(\"physics/2d/default_gravity\")

	# Handle Jump.
	if Input.is_action_just_pressed(\"up\") and (is_on_floor() or coyote) and state != States.Walljumping and !cantuncrouch:
		jump()
		
	#Handle Double Jump
	#if Input.is_action_just_pressed(\"up\") and !is_on_floor() and _state != 3 and nojumps == false and justjumped == true:
	#	jump()
	#	nojumps = true
	#if Input.is_action_just_released(\"up\"):
		#velocity.y *= .60
	if not Input.is_action_pressed(\"up\") and state == States.Jumping:
		velocity.y *= .90
	move_and_slide()
















"

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_g1m73"]
radius = 27.5
height = 80.0

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_rqd24"]
radius = 18.1334
height = 38.3333

[sub_resource type="GDScript" id="GDScript_bmjrg"]
script/source = "extends Label
@onready var player = get_parent()

# Called when the node enters the scene tree for the first time.
func _ready():
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(_delta):
	if player.state == player.States.Ground:
		text = (\"grounded\")
	if player.state == player.States.Jumping:
		text = (\"jumping\")
	if player.state == player.States.Falling:
		text = (\"falling\")
	if player.state == player.States.On_Wall:
		text = (\"wall\")
	if player.state == player.States.Walljumping:
		text = (\"walljumping\")
	if player.state == player.States.Walking:
		text = (\"walking\")
	if player.state == player.States.Crouching:
		text = (\"crouching\")
	if player.state == player.States.Sneaking:
		text = (\"sneaking\")
	if player.state == player.States.Sliding:
		text = (\"sliding\")
"

[sub_resource type="RectangleShape2D" id="RectangleShape2D_j0dwg"]
size = Vector2(59.3333, 45.3333)

[node name="Player" type="CharacterBody2D"]
position = Vector2(505, 299)
scale = Vector2(1.5, 1.5)
collision_layer = 2
script = SubResource("GDScript_vsbh0")

[node name="Sprite2D" type="Sprite2D" parent="."]
scale = Vector2(0.476563, 0.654297)
texture = ExtResource("1_rc4rb")

[node name="PlayerCol" type="CollisionShape2D" parent="."]
shape = SubResource("CapsuleShape2D_g1m73")

[node name="CrouchCol" type="CollisionShape2D" parent="."]
position = Vector2(0, 21.8669)
rotation = 1.5708
shape = SubResource("CapsuleShape2D_rqd24")
disabled = true

[node name="States" type="Label" parent="."]
offset_left = -33.0
offset_top = -73.0
offset_right = 7.0
offset_bottom = -50.0
horizontal_alignment = 1
vertical_alignment = 1
script = SubResource("GDScript_bmjrg")

[node name="SlideTimer" type="Timer" parent="."]
wait_time = 0.5
one_shot = true

[node name="CoyoteTimer" type="Timer" parent="."]
wait_time = 0.5
one_shot = true

[node name="JumpBuffer" type="Timer" parent="."]
wait_time = 0.2
one_shot = true

[node name="WallSlowTimer" type="Timer" parent="."]
wait_time = 0.7
one_shot = true

[node name="AboveCollision" type="RayCast2D" parent="."]
target_position = Vector2(1, -40)
hit_from_inside = true
collide_with_areas = true

[node name="AboveCollision2" type="RayCast2D" parent="."]
position = Vector2(25, 0)
target_position = Vector2(1, -40)
hit_from_inside = true
collide_with_areas = true

[node name="AboveCollision3" type="RayCast2D" parent="."]
position = Vector2(-25, 0)
target_position = Vector2(1, -40)
hit_from_inside = true
collide_with_areas = true

[node name="WallColCheckTimer" type="Timer" parent="."]
wait_time = 0.001
one_shot = true

[node name="Area2D" type="Area2D" parent="."]
position = Vector2(62, 0)
collision_layer = 2

[node name="CollisionShape2D" type="CollisionShape2D" parent="Area2D"]
shape = SubResource("RectangleShape2D_j0dwg")

[connection signal="timeout" from="SlideTimer" to="." method="_on_slide_timer_timeout"]
[connection signal="timeout" from="CoyoteTimer" to="." method="_on_coyote_timer_timeout"]
[connection signal="timeout" from="JumpBuffer" to="." method="_on_jump_buffer_timeout"]
[connection signal="timeout" from="WallSlowTimer" to="." method="_on_wall_slow_timer_timeout"]
[connection signal="timeout" from="WallColCheckTimer" to="." method="_on_wall_col_check_timer_timeout"]
