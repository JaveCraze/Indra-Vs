[gd_scene load_steps=31 format=3 uid="uid://eb45g6exg3qh"]

[ext_resource type="Texture2D" uid="uid://dik8vab50bgks" path="res://roguecrouch-Sheet.png" id="3_40ns3"]
[ext_resource type="Texture2D" uid="uid://b0t1eyy7gvjg0" path="res://characteranim-Sheet.png" id="3_ikpvk"]
[ext_resource type="Texture2D" uid="uid://dcc0pfrm5y8oq" path="res://roguejumpattack-Sheet.png" id="3_qsoob"]
[ext_resource type="Texture2D" uid="uid://c7fniq8kvoaa" path="res://rogueidle-Sheet.png" id="4_cx8v2"]

[sub_resource type="GDScript" id="GDScript_vsbh0"]
script/source = "extends CharacterBody2D
@onready var anim = $AnimPlayer
var basespeed = 430.0
var upslopespeed = 280.0
var downslopespeed = 500
var slidespeed = 1.3
var walljumpbegin : bool = false
var walljumpunlocked : bool = false
var slideunlocked : bool = false
var SPEED = basespeed
var accel = .09
var jumpresistance = .74
const JUMP_VELOCITY = -800.0
var damage = 1
var walljumpvelocity = 570
var airattackvelocity = 500
var attackvelocity = 700
var attackvelocity2 = 500
var attackvelocity3 = 600
var airattacks : bool = true
var lowvelocity = 20
var on_slope : bool = false
enum {Ground, Jumping, Falling, On_Wall, Walljumping, Walking, Crouching, Sneaking, Sliding, Attack1, Attack2, Attack3, AirAttack, Turning}
#pipe state is connected to jumping, fix that
enum WeaponStates {Fist, Pipe}
var nojumps : bool = false
var state : int = Ground
var weapon : int = WeaponStates.Fist
var gravity = ProjectSettings.get_setting(\"physics/2d/default_gravity\")
var coyote : bool = false
var coyote_frames = 3
var turnstarted : bool = false
var lookinleft : bool = false
var justjumped : bool = false
var coyotestarted : bool = false
var jumpbuffer : bool = false
var canwallcolcheck : bool = true
var wallslow : bool = true
var slidecooldown : bool = false
var attackcooldown : bool = false
var timerstarted : bool = false
var cantuncrouch : bool = false
var sliding : bool = false
var attacking : bool = false 
var attack2 : bool = false
var attack3 : bool = false
var airattacking : bool = false
var attackstartup : bool = false
@onready var Standingcshape = $PlayerCol
@onready var Crouchingcshape = $CrouchCol
@onready var hitbox = $HitArea

signal paused

func _ready() -> void:
	Gamemanager.player = self
	state = Ground

func jump() -> void:
	velocity.y = lerp(velocity.y, JUMP_VELOCITY, jumpresistance) 
	justjumped = true
	if state != Walljumping:
		state = Jumping
func die() -> void:
	Gamemanager.respawn_player()
func _on_coyote_timer_timeout():
	coyote = false
func _on_jump_buffer_timeout():
	jumpbuffer = false
func _on_wall_slow_timer_timeout():
	wallslow = false
func _on_slide_timer_timeout():
		sliding = false
func _on_start_up_timer_timeout():
	attackstartup = false
func _on_wall_col_check_timer_timeout():
	canwallcolcheck = true
func _on_attack_timer_timeout():
	attacking = false
	attack2 = false
	attack3 = false
	#hitbox.monitoring = false
func _on_air_attack_timer_timeout():
	print(\"yosh\")
	airattacking = false
	#hitbox.monitoring = false
func beginslide():
	if !slidecooldown and state != Sliding and !slidecooldown and slideunlocked:
		floor_snap_length = 30
		if lookinleft:
			velocity.x = -slidespeed * SPEED
		else:
			velocity.x = slidespeed * SPEED
		state = Sliding
		if sliding == false:
			$SlideTimer.start()
			sliding = true
func handle_wall_jump():
	if state != On_Wall: return
	var wall_normal = get_wall_normal()
	#handle wall jump
	if Input.is_action_just_pressed(\"up\") and wall_normal == Vector2.LEFT and state != Walljumping: #and !Input.is_action_pressed(\"right\"):
		state = Walljumping
		walljumpbegin = true
		velocity.x = 0
		velocity.x -= walljumpvelocity
		jump()
		if lookinleft == false:
			lookinleft = true
			scale.x = -1.0
	if Input.is_action_just_pressed(\"up\") and wall_normal == Vector2.RIGHT and state != Walljumping: #and !Input.is_action_pressed(\"left\"):
		state = Walljumping
		walljumpbegin = true
		velocity.x = 0
		velocity.x += walljumpvelocity
		jump()
		if lookinleft == true:
			lookinleft = false
			scale.x = -1.0
func handle_attack():
	if Input.is_action_just_pressed(\"attack\"):
		if is_on_floor() and !Input.is_action_pressed(\"up\") and !cantuncrouch and attackcooldown == false:
			if attacking == false:
				velocity.x = 0
				if lookinleft == false:
					velocity.x += attackvelocity
				else:
					velocity.x -= attackvelocity
				if attacking == false:
					print(\"letsbegin\")
					$StartUpTimer.wait_time = 0.3
					$StartUpTimer.start()
					$AttackTimer.wait_time = 0.5
					$AttackTimer.start()
					attacking = true
					attackstartup = true
				state = Attack1
		else:
			#if state == States.Jumping or state == States.Falling or state == States.Walljumping:
			if airattacks == true and !cantuncrouch and !is_on_floor():
				if airattacking == false:
					state = AirAttack
func handle_heavy_attack():
	if Input.is_action_just_pressed(\"heavy\"):
		print(\"tamo HEAVY\")
		pass
func _on_killzone_body_entered(_body):
	print(\"dead\")
	die()
func _physics_process(delta):
	get_wall_normal()
	var direction = Input.get_axis(\"left\", \"right\")
	if state != Walljumping and state != Sliding and state != Crouching:
		if direction and attacking == false:
			if is_on_floor():
				velocity.x = lerp(velocity.x, direction * SPEED, .3)
			if !is_on_floor():
				velocity.x = lerp(velocity.x, direction * SPEED, 0.08)
		else:
			if is_on_floor():
				if attacking:
					velocity.x = lerp(velocity.x, 0.0, .10)
				else:
					velocity.x = lerp(velocity.x, 0.0, .15)
			else:
				velocity.x = lerp(velocity.x, 0.0, .08)
	#flip if turned
	if direction != 0 and state != Walljumping and state != Sliding and !attacking and !airattacking:
		if direction >0 and lookinleft == true:
			lookinleft = false
			scale.x = -1.0
		if direction <0 and lookinleft == false: 
			lookinleft = true
			scale.x = -1.0
	handle_wall_jump()
	handle_attack()
	handle_heavy_attack()
	if on_slope == true:
		if $Slopeforward.is_colliding():
			if state != Sliding:
				SPEED = upslopespeed
		else:
			if !$Slopebackward.is_colliding():
				SPEED = basespeed
		if $Slopebackward.is_colliding():
					SPEED = downslopespeed
		else:
			if !$Slopeforward.is_colliding():
				SPEED = basespeed
	else:
		SPEED = basespeed
	match state:
		Jumping:
			turnstarted = false
			#anim.play(\"jump\")
		Walljumping:
			if walljumpbegin == true:
				canwallcolcheck = false
			$WallColCheckTimer.start()
			#anim.play(\"walljump\")
			if is_on_wall():
				if !Input.is_action_just_pressed(\"up\") and walljumpunlocked:
					state = On_Wall
		Ground:
			anim.play(\"idle\")
			sliding = false
			if Input.is_action_pressed(\"down\"):
				if velocity.x >= -lowvelocity and velocity.x <= lowvelocity and !cantuncrouch:
					if is_on_floor() and slideunlocked:
						anim.play(\"crouch\")
						state = Crouching
					else: 
						velocity.y = lerp(velocity.y, basespeed, jumpresistance) 
		Walking:
			#anim.play(\"walk\")
			if Input.is_action_just_pressed(\"down\") and !slidecooldown and (velocity.x  > lowvelocity or velocity.x  < -lowvelocity):
				beginslide()
		Sliding:
			floor_snap_length = 30
			#anim.play(\"slide\")
			Standingcshape.disabled = true
			Crouchingcshape.disabled = false
			if velocity.y > 600 and !cantuncrouch:
				state = Falling
			if velocity.x > 0 and velocity.x < 100 and !cantuncrouch and !$Slopeforward.is_colliding() and lookinleft:
				print(\"turnright\")
				lookinleft = false
				scale.x = -1.0
			if velocity.x < 0 and velocity.x > -100 and !cantuncrouch and !$Slopebackward.is_colliding() and !lookinleft:
				print(\"turnleft\")
				lookinleft = true
				scale.x = 1.0
			#if !is_on_floor:
				#anim.play(\"slidefalling\")
			if $Slopebackward.is_colliding() and on_slope:
				#anim.play(\"slidedown\")
				if !lookinleft:
					velocity.x = lerp(velocity.x, 900.0, .15)
				if lookinleft:
					velocity.x = lerp(velocity.x, -900.0, .15)
			if $Slopeforward.is_colliding() and on_slope:
				if velocity.x > 700 or velocity.x < -700:
					upslopespeed = 800
				if !lookinleft and velocity.x == 0:
					velocity.x = lerp(velocity.x, -900.0, 0.5)
				if lookinleft and velocity.x == 0:
					velocity.x = lerp(velocity.x, 900.0, .15)
				if cantuncrouch and !$Slopebackward.is_colliding():
					if lookinleft:
						velocity.x = lerp(velocity.x, 900.0, .15)
				#anim.play(\"slideup\")
			if sliding == false:
				if cantuncrouch == false and !$Slopebackward.is_colliding():
					if velocity.x > 630 or velocity.x < -630:
						velocity.x = lerp(velocity.x, 0.0, .03)
					else:
						if is_on_floor():
							velocity.x = lerp(velocity.x, 0.0, .2)
						else:
							velocity.x = lerp(velocity.x, 0.0, .003)
							if velocity.y < 0:
								velocity.y *= .7
					slidecooldown = true
					$SlideCoolTimer.start()
			if velocity.x >= -lowvelocity and velocity.x <= lowvelocity and is_on_floor() and !cantuncrouch:
					state = Ground
					if Input.is_action_pressed(\"down\") and slideunlocked:
						anim.play(\"crouch\")
						state = Crouching
			if !on_slope and cantuncrouch:
				if velocity.x > 0 and velocity.x < 601:
					velocity.x = lerp(velocity.x, 600.0, .6)
				if velocity.x < 0 and velocity.x > -601:
					velocity.x = lerp(velocity.x, -600.0, .6)
		Crouching:
			Standingcshape.disabled = true
			Crouchingcshape.disabled = false
			if state == Walking and (velocity.x > 400 or velocity.x < -400) and !slidecooldown:
				beginslide()
			if Input.is_action_just_pressed(\"right\") and !slidecooldown:
				beginslide()
			if Input.is_action_just_pressed(\"left\") and !slidecooldown:
				beginslide()
			if !Input.is_action_pressed(\"down\") and !cantuncrouch:
				state = Ground
		Turning:
			if turnstarted == false:
				turnstarted = true
				$turnstatetimer.start()
				#will replace with turn anim
				#anim.play(\"crouch\")
		Falling:
			if Input.is_action_just_pressed(\"attack\"):
				if airattacks == true and !cantuncrouch and airattacking == false:
						state = AirAttack
			#anim.play(\"fall\")
			velocity.y += 20
			if is_on_floor():
				state = Ground
				if Input.is_action_pressed(\"down\") and slideunlocked:
					anim.play(\"crouch\")
					state = Crouching
		Attack1:
			if attacking == false:
				print(\"attackfalse\")
				#hitbox.monitoring = false
				state = Ground
				attackcooldown = true
				$AttackCoolTimer.wait_time = .5
				$AttackCoolTimer.start()
			#hitbox.monitoring = true
			#anim.play(\"attack\")
			#if attackstartup == false:
				#hitbox.monitoring = false
			if Input.is_action_just_pressed(\"attack\") and attacking == true and attackstartup == false and is_on_floor():
				if lookinleft == false:
					velocity.x += attackvelocity2
				else:
					velocity.x -= attackvelocity2
				if attack2 == false:
					$StartUpTimer.wait_time = 0.3
					$StartUpTimer.start()
					$AttackTimer.wait_time = 0.6
					$AttackTimer.start()
					attack2 = true
					attacking = true
					attackstartup = true
				state = Attack2
		Attack2:
			#hitbox.monitoring = true
			#anim.play(\"attack2\")
			#if attackstartup == false:
				#hitbox.monitoring = false
			if Input.is_action_just_pressed(\"attack\") and attacking == true and attackstartup == false: #and attackstartup == false and is_on_floor():
				if lookinleft == false:
					velocity.x += attackvelocity3
				else:
					velocity.x -= attackvelocity3
				if state != Attack1:
					if attack3 == false:
						print(\"yesyes\")
						$StartUpTimer.wait_time = 0.5
						$StartUpTimer.start()
						$AttackTimer.wait_time = 0.8
						$AttackTimer.start()
						attack3 = true
						attacking = true
						attackstartup = true
					state = Attack3
			if attacking == false:
				#hitbox.monitoring = false
				attackcooldown = true
				$AttackCoolTimer.wait_time = .6
				$AttackCoolTimer.start()
				state = Ground
		Attack3:
			if attacking == false:
				#hitbox.monitoring = false
				attackcooldown = true
				$AttackCoolTimer.wait_time = 1
				$AttackCoolTimer.start()
				state = Ground
			#hitbox.monitoring = true
			#anim.play(\"attack3\")
			#if attackstartup == false:
				#hitbox.monitoring = false
		AirAttack:
			if airattacking == false and airattacks == true:
				airattacks = false
				airattacking = true
				velocity.y = 0
				velocity.y -= airattackvelocity
				$AnimPlayer.play(\"airattack\")
				$AirAttackTimer.start()
			#hitbox.monitoring = true
			if airattacking == false:
				print(\"hello\")
				#hitbox.monitoring = false
				state = Falling
		On_Wall:
			airattacks = true
			if Input.is_action_just_pressed(\"right\"):
				state = Falling
			if Input.is_action_just_pressed(\"left\"):
				state = Falling
			if !is_on_wall() and !$Wallcheck.is_colliding() and !$Wallcheck2.is_colliding():
				state = Falling
			#anim.play(\"onwall\")
			if velocity.y > 0:
				if Input.is_action_just_pressed(\"down\"):
					wallslow = false
				if wallslow == true:
					gravity = 300
					if timerstarted == false:
						$WallSlowTimer.start()
						timerstarted = true
				else:
					gravity = ProjectSettings.get_setting(\"physics/2d/default_gravity\")
					velocity.y *= 1.15
				if velocity.y > 600:
					state = Falling

	if state != On_Wall:
		wallslow = true
		timerstarted = false
		gravity = ProjectSettings.get_setting(\"physics/2d/default_gravity\")

#just disables crouch hitbox, dont touch
	if state != Crouching and state != Sliding:
		Crouchingcshape.disabled = true
		Standingcshape.disabled = false
#gravity and jumpbuffer
	if not is_on_floor():
		velocity.y += gravity * delta
		if Input.is_action_just_pressed(\"up\"):
			$JumpBuffer.start()
			jumpbuffer = true

	if $AboveCollision.is_colliding() or $AboveCollision2.is_colliding() or $AboveCollision3.is_colliding():
		cantuncrouch = true
	else:
		cantuncrouch = false

	if Input.is_action_just_pressed(\"pause\"):
		get_tree().paused = true
		emit_signal(\"paused\")
		

#Manages groundedstate
	if is_on_floor() and !cantuncrouch and state != Sliding and attacking == false and velocity.x >= -lowvelocity and velocity.x <= lowvelocity and state != Turning and !Input.is_action_pressed(\"down\") and !Input.is_action_pressed(\"left\") and !Input.is_action_pressed(\"right\"):
		state = Ground
	if velocity.y > 0 and !cantuncrouch and state != On_Wall and airattacking == false and !is_on_floor() and sliding == false and state != Sliding:
		state = Falling

#Manages floor refreshes
	if is_on_floor():
		if jumpbuffer == true:
			jump()
			jumpbuffer = false
		airattacking = false
		airattacks = true
		nojumps = false
		justjumped = false
		walljumpbegin = false
		coyotestarted = false
		if !$Slopechecker.is_colliding():
			on_slope = true
		else:
			on_slope = false

#handle walk state activation
	if velocity.x < -lowvelocity and is_on_floor() or velocity.x > lowvelocity and is_on_floor():
		if !Input.is_action_pressed(\"down\") and sliding == false and !cantuncrouch and (Input.is_action_pressed(\"left\") or Input.is_action_pressed(\"right\")) and attacking == false and state != Turning and !Input.is_action_pressed(\"attack\") and attackstartup == false:
			state = Walking

	#if Input.is_action_pressed(\"scan\") and state == States.Ground:
		#pass
		#enter scanning state
		#instantialize scan radar 
#Wallhang code
	if !is_on_floor() and is_on_wall():
		var wall_normal = get_wall_normal()
		if wall_normal == Vector2.RIGHT and !Input.is_action_just_pressed(\"up\") and velocity.x < 0 and ($Wallcheck.is_colliding() or $Wallcheck2.is_colliding()) and walljumpunlocked: #or velocity.x < 0:
			state = On_Wall
			velocity.y *= .85
		if wall_normal == Vector2.LEFT and !Input.is_action_just_pressed(\"up\") and velocity.x > 0 and ($Wallcheck.is_colliding() or $Wallcheck2.is_colliding()) and walljumpunlocked: #or velocity.x > 0:
			state = On_Wall
			velocity.y *= .85

	if !is_on_floor() and justjumped == false and coyotestarted == false: #and coyote == false:
		$CoyoteTimer.start()
		coyote = true
		coyotestarted = true



	#else: 
		#Standingcshape.disabled = false
		#Crouchingcshape.disabled = true
#Sliding code...
	if state != Sliding:
		floor_snap_length = 20
		sliding = false


#activate turn state
	#if walking left
	if velocity.x < -0 and is_on_floor() and attacking == false and state != Crouching and !cantuncrouch and attackstartup == false:
		if Input.is_action_pressed(\"right\"):
			if state != Sliding:
				state = Turning
		if Input.is_action_just_pressed(\"right\"):
			if state != Sliding:
				state = Turning
	#if walking right
	if velocity.x > 0 and is_on_floor() and attacking == false and state != Crouching  and !cantuncrouch and attackstartup == false:
		if Input.is_action_pressed(\"left\"):
			if state != Sliding:
				state = Turning
		if Input.is_action_just_pressed(\"left\"):
			if state != Sliding:
				state = Turning

#turn state





	# Handle Jump.
	if Input.is_action_just_pressed(\"up\") and (is_on_floor() or coyote) and state != Walljumping and !cantuncrouch:
		jump()
		
	#Handle Double Jump
	#if Input.is_action_just_pressed(\"up\") and !is_on_floor() and _state != 3 and nojumps == false and justjumped == true:
	#	jump()
	#	nojumps = true
	#if Input.is_action_just_released(\"up\"):
		#velocity.y *= .60
	if not Input.is_action_pressed(\"up\") and state == Jumping:
		velocity.y *= .90
	move_and_slide()


func _on_hit_area_body_entered(body):
	body.hit(damage)
	if body.knockspeed:
		if state == Attack1:
			body.knockback_velocity.y = -10
			body.knockspeed = 150
		if state == Attack2:
			body.knockback_velocity.y = -20
			body.knockspeed = 300


func _on_jump_hit_area_body_entered(body):
	body.hit(damage)
	if body.knockspeed:
		if state == Attack1:
			body.knockback_velocity.y = -10
			body.knockspeed = 150
		if state == Attack2:
			body.knockback_velocity.y = -20
			body.knockspeed = 300


func _on_turnstatetimer_timeout():
	turnstarted = false
	if is_on_floor():
		if !attacking:
			if velocity.x < lowvelocity and velocity.x > -lowvelocity:
				state = Ground
			else:
				state = Walking
				



func _on_slide_cool_timer_timeout():
	slidecooldown = false


func _on_attack_cool_timer_timeout():
	attackcooldown = false
	print(\"canattack\")

"

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_g1m73"]
radius = 19.0
height = 92.0

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_rqd24"]
radius = 17.0
height = 34.0

[sub_resource type="GDScript" id="GDScript_bmjrg"]
script/source = "extends Label
@onready var player = get_parent()

# Called when the node enters the scene tree for the first time.
func _ready():
	pass # Replace with function body.


# Called every frame. 'delta' is the elapsed time since the previous frame.
func _process(_delta):
	match player.state:
		player.Ground:
			text = (\"grounded\")
		player.Jumping:
			text = (\"jumping\")
		player.Falling:
			text = (\"falling\")
		player.On_Wall:
			text = (\"wall\")
		player.Walljumping:
			text = (\"walljumping\")
		player.Walking:
			text = (\"walking\")
		player.Crouching:
			text = (\"crouching\")
		player.Sliding:
			text = (\"sliding\")
		player.Attack1:
			text = (\"attack\")
		player.Attack2:
			text = (\"attack2\")
		player.Attack3:
			text = (\"attack3\")
		player.AirAttack:
			text = (\"airattack\")
		player.Turning:
			text = (\"turning\")

"

[sub_resource type="CapsuleShape2D" id="CapsuleShape2D_pecl2"]
radius = 30.0
height = 153.045

[sub_resource type="RectangleShape2D" id="RectangleShape2D_j0dwg"]
size = Vector2(48, 78.3333)

[sub_resource type="Animation" id="Animation_cigba"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Animations:texture")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [ExtResource("3_qsoob")]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Animations:frame")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [0]
}

[sub_resource type="Animation" id="Animation_wvav2"]
resource_name = "airattack"
length = 0.8
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Animations:frame")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.1, 0.2, 0.4, 0.6, 0.8),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1),
"update": 1,
"values": [0, 1, 2, 3, 4, 5]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("JumpHitArea/CollisionShape2D:disabled")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.2, 0.4),
"transitions": PackedFloat32Array(1, 1, 1),
"update": 1,
"values": [true, false, true]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("Animations:texture")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [ExtResource("3_qsoob")]
}
tracks/3/type = "value"
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/path = NodePath("JumpHitArea:monitoring")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [true]
}

[sub_resource type="Animation" id="Animation_ynjgg"]
resource_name = "crouch"
length = 0.4
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Animations:texture")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [ExtResource("3_40ns3")]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Animations:frame")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.1, 0.2, 0.3, 0.4),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1),
"update": 1,
"values": [0, 1, 2, 3, 4]
}

[sub_resource type="Animation" id="Animation_nf2le"]
resource_name = "idle"
length = 1.8
loop_mode = 1
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Animations:texture")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [ExtResource("4_cx8v2")]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath("Animations:frame")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.3, 0.6, 0.9, 1.2, 1.5, 1.8),
"transitions": PackedFloat32Array(1, 1, 1, 1, 1, 1, 1),
"update": 1,
"values": [0, 1, 2, 3, 4, 5, 5]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_xpt2j"]
_data = {
"RESET": SubResource("Animation_cigba"),
"airattack": SubResource("Animation_wvav2"),
"crouch": SubResource("Animation_ynjgg"),
"idle": SubResource("Animation_nf2le")
}

[sub_resource type="AtlasTexture" id="AtlasTexture_f6316"]
atlas = ExtResource("3_ikpvk")
region = Rect2(1440, 0, 180, 180)

[sub_resource type="AtlasTexture" id="AtlasTexture_711ci"]
atlas = ExtResource("3_ikpvk")
region = Rect2(900, 0, 180, 180)

[sub_resource type="AtlasTexture" id="AtlasTexture_21213"]
atlas = ExtResource("3_ikpvk")
region = Rect2(540, 0, 180, 180)

[sub_resource type="AtlasTexture" id="AtlasTexture_wdrjq"]
atlas = ExtResource("4_cx8v2")
region = Rect2(0, 0, 180, 180)

[sub_resource type="AtlasTexture" id="AtlasTexture_o8i2w"]
atlas = ExtResource("4_cx8v2")
region = Rect2(180, 0, 180, 180)

[sub_resource type="AtlasTexture" id="AtlasTexture_1w6yl"]
atlas = ExtResource("4_cx8v2")
region = Rect2(360, 0, 180, 180)

[sub_resource type="AtlasTexture" id="AtlasTexture_xtfgt"]
atlas = ExtResource("4_cx8v2")
region = Rect2(540, 0, 180, 180)

[sub_resource type="AtlasTexture" id="AtlasTexture_1fual"]
atlas = ExtResource("4_cx8v2")
region = Rect2(720, 0, 180, 180)

[sub_resource type="AtlasTexture" id="AtlasTexture_6283s"]
atlas = ExtResource("4_cx8v2")
region = Rect2(900, 0, 180, 180)

[sub_resource type="AtlasTexture" id="AtlasTexture_elqlu"]
atlas = ExtResource("3_ikpvk")
region = Rect2(360, 0, 180, 180)

[sub_resource type="AtlasTexture" id="AtlasTexture_o7ygq"]
atlas = ExtResource("3_ikpvk")
region = Rect2(1080, 0, 180, 180)

[sub_resource type="AtlasTexture" id="AtlasTexture_venv7"]
atlas = ExtResource("3_ikpvk")
region = Rect2(720, 0, 180, 180)

[sub_resource type="AtlasTexture" id="AtlasTexture_3vgd5"]
atlas = ExtResource("3_ikpvk")
region = Rect2(180, 0, 180, 180)

[sub_resource type="AtlasTexture" id="AtlasTexture_36jec"]
atlas = ExtResource("3_ikpvk")
region = Rect2(1260, 0, 180, 180)

[sub_resource type="SpriteFrames" id="SpriteFrames_ko7na"]
animations = [{
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_f6316")
}],
"loop": false,
"name": &"attack",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_711ci")
}],
"loop": true,
"name": &"crouch",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_21213")
}],
"loop": true,
"name": &"fall",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_wdrjq")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_o8i2w")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_1w6yl")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_xtfgt")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_1fual")
}, {
"duration": 1.0,
"texture": SubResource("AtlasTexture_6283s")
}],
"loop": true,
"name": &"idle",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_elqlu")
}],
"loop": true,
"name": &"jump",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_o7ygq")
}],
"loop": true,
"name": &"onwall",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_venv7")
}],
"loop": true,
"name": &"slide",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_3vgd5")
}],
"loop": true,
"name": &"walk",
"speed": 5.0
}, {
"frames": [{
"duration": 1.0,
"texture": SubResource("AtlasTexture_36jec")
}],
"loop": true,
"name": &"walljump",
"speed": 5.0
}]

[node name="Player" type="CharacterBody2D"]
position = Vector2(505, 299)
collision_layer = 2
platform_floor_layers = 4294967265
platform_wall_layers = 1
script = SubResource("GDScript_vsbh0")

[node name="PlayerCol" type="CollisionShape2D" parent="."]
position = Vector2(0, -5)
rotation = 3.14159
shape = SubResource("CapsuleShape2D_g1m73")

[node name="CrouchCol" type="CollisionShape2D" parent="."]
position = Vector2(0, 23.8669)
rotation = 3.14159
shape = SubResource("CapsuleShape2D_rqd24")
disabled = true

[node name="States" type="Label" parent="."]
offset_left = -33.0
offset_top = -73.0
offset_right = 7.0
offset_bottom = -50.0
horizontal_alignment = 1
vertical_alignment = 1
script = SubResource("GDScript_bmjrg")

[node name="SlideTimer" type="Timer" parent="."]
wait_time = 0.3
one_shot = true

[node name="SlideCoolTimer" type="Timer" parent="."]
wait_time = 0.5
one_shot = true

[node name="CoyoteTimer" type="Timer" parent="."]
wait_time = 0.3
one_shot = true

[node name="JumpBuffer" type="Timer" parent="."]
wait_time = 0.2
one_shot = true

[node name="WallSlowTimer" type="Timer" parent="."]
one_shot = true

[node name="AttackTimer" type="Timer" parent="."]
wait_time = 0.7
one_shot = true

[node name="AirAttackTimer" type="Timer" parent="."]
wait_time = 0.7
one_shot = true

[node name="AboveCollision" type="RayCast2D" parent="."]
target_position = Vector2(0, -40)
hit_from_inside = true
collide_with_areas = true

[node name="AboveCollision2" type="RayCast2D" parent="."]
position = Vector2(16, 0)
target_position = Vector2(0, -40)
hit_from_inside = true
collide_with_areas = true

[node name="AboveCollision3" type="RayCast2D" parent="."]
position = Vector2(-16, 0)
target_position = Vector2(0, -40)
hit_from_inside = true
collide_with_areas = true

[node name="WallColCheckTimer" type="Timer" parent="."]
process_callback = 0
wait_time = 0.001
one_shot = true

[node name="JumpHitArea" type="Area2D" parent="."]
position = Vector2(26, -193)
collision_layer = 2
collision_mask = 16

[node name="CollisionShape2D" type="CollisionShape2D" parent="JumpHitArea"]
position = Vector2(-37, 131)
rotation = -1.39626
shape = SubResource("CapsuleShape2D_pecl2")

[node name="HitArea" type="Area2D" parent="."]
collision_layer = 2
collision_mask = 16
monitoring = false

[node name="HitboxCol" type="CollisionShape2D" parent="HitArea"]
position = Vector2(27, -2.83337)
shape = SubResource("RectangleShape2D_j0dwg")

[node name="AnimPlayer" type="AnimationPlayer" parent="."]
libraries = {
"": SubResource("AnimationLibrary_xpt2j")
}

[node name="CharacterAnimator" type="AnimatedSprite2D" parent="."]
visible = false
texture_filter = 1
position = Vector2(5, -2)
sprite_frames = SubResource("SpriteFrames_ko7na")
animation = &"fall"

[node name="Wallcheck" type="RayCast2D" parent="."]
position = Vector2(0, -9)
target_position = Vector2(20, 0)

[node name="Wallcheck2" type="RayCast2D" parent="."]
position = Vector2(0, -9)
target_position = Vector2(-20, 0)

[node name="turnstatetimer" type="Timer" parent="."]
wait_time = 0.3
one_shot = true

[node name="StartUpTimer" type="Timer" parent="."]
wait_time = 0.4
one_shot = true

[node name="AttackCoolTimer" type="Timer" parent="."]
one_shot = true

[node name="Slopechecker" type="RayCast2D" parent="."]
target_position = Vector2(0, 45)

[node name="Slopeforward" type="RayCast2D" parent="."]
target_position = Vector2(11, 39)

[node name="Slopebackward" type="RayCast2D" parent="."]
target_position = Vector2(-11, 39)

[node name="Animations" type="Sprite2D" parent="."]
texture = ExtResource("3_qsoob")
hframes = 6

[connection signal="timeout" from="SlideTimer" to="." method="_on_slide_timer_timeout"]
[connection signal="timeout" from="SlideCoolTimer" to="." method="_on_slide_cool_timer_timeout"]
[connection signal="timeout" from="CoyoteTimer" to="." method="_on_coyote_timer_timeout"]
[connection signal="timeout" from="JumpBuffer" to="." method="_on_jump_buffer_timeout"]
[connection signal="timeout" from="WallSlowTimer" to="." method="_on_wall_slow_timer_timeout"]
[connection signal="timeout" from="AttackTimer" to="." method="_on_attack_timer_timeout"]
[connection signal="timeout" from="AirAttackTimer" to="." method="_on_air_attack_timer_timeout"]
[connection signal="timeout" from="WallColCheckTimer" to="." method="_on_wall_col_check_timer_timeout"]
[connection signal="body_entered" from="JumpHitArea" to="." method="_on_jump_hit_area_body_entered"]
[connection signal="body_entered" from="HitArea" to="." method="_on_hit_area_body_entered"]
[connection signal="timeout" from="turnstatetimer" to="." method="_on_turnstatetimer_timeout"]
[connection signal="timeout" from="StartUpTimer" to="." method="_on_start_up_timer_timeout"]
[connection signal="timeout" from="AttackCoolTimer" to="." method="_on_attack_cool_timer_timeout"]
